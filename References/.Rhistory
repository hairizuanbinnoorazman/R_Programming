weeklyCountry_Visits_ConversionRate <- arrange(weeklyCountry_Visits_ConversionRate, Date)
weeklyCountry_Visits_ConversionRate$Date <- convertDateVectorToWeekString(weeklyCountry_Visits_ConversionRate$Date)
weeklyCountry_Visits_ConversionRate
}
# Function to extract Visits split by Digital Property (Total, Web, Mobile) for the last 10 weeks
trend_weeklyCountry_Visits_splitByDigital <- function(country, currentYearStart, currentYearEnd){
query1 <- paste0("SELECT Date, Visits FROM TABLE_DATE_RANGE(Total_Weekly_Performance.Weekly_Country_Metrics, TIMESTAMP('", currentYearStart, "'), TIMESTAMP('", currentYearEnd, "')) where Country = '", country, "'")
query2 <- paste0("SELECT Date, Visits FROM TABLE_DATE_RANGE(Web_Weekly_Performance.Weekly_Country_Metrics, TIMESTAMP('", currentYearStart, "'), TIMESTAMP('", currentYearEnd, "')) where Country = '", country, "'")
query3 <- paste0("SELECT Date, Visits FROM TABLE_DATE_RANGE(Mobile_Weekly_Performance.Weekly_MobileTotal_CountryMetrics, TIMESTAMP('", currentYearStart, "'), TIMESTAMP('", currentYearEnd, "')) where Country = '", country, "'")
# Process Total Data
totalWeeklyData_Visits <- query_exec(query1, projectID)
names(totalWeeklyData_Visits) <- c("Date", "Total.Visits")
# Process Web Data
webWeeklyData_Visits <- query_exec(query2, projectID)
names(webWeeklyData_Visits) <- c("Date", "Web.Visits")
# Process Mobile Data
mobileWeeklyData_Visits <- query_exec(query3, projectID)
names(mobileWeeklyData_Visits) <- c("Date", "Mobile.Visits")
# Bind all data together
dataset <- left_join(totalWeeklyData_Visits, webWeeklyData_Visits)
dataset <- left_join(dataset, mobileWeeklyData_Visits)
dataset$Date <- convertDateVectorToWeekString(dataset$Date)
dataset <- arrange(dataset, Date)
return(dataset)
}
# Function to extract Flight Searches split by Digital Property (Total, Web, Mobile) for the last 10 weeks
trend_weeklyCountry_FlightSearches_splitByDigital <- function(country, currentYearStart, currentYearEnd){
query1 <- paste0("SELECT Date, FlightSearches FROM TABLE_DATE_RANGE(Total_Weekly_Performance.Weekly_Country_Metrics, TIMESTAMP('", currentYearStart, "'), TIMESTAMP('", currentYearEnd, "')) where Country = '", country, "'")
query2 <- paste0("SELECT Date, FlightSearches FROM TABLE_DATE_RANGE(Web_Weekly_Performance.Weekly_Country_Metrics, TIMESTAMP('", currentYearStart, "'), TIMESTAMP('", currentYearEnd, "')) where Country = '", country, "'")
query3 <- paste0("SELECT Date, FlightSearches FROM TABLE_DATE_RANGE(Mobile_Weekly_Performance.Weekly_MobileTotal_CountryMetrics, TIMESTAMP('", currentYearStart, "'), TIMESTAMP('", currentYearEnd, "')) where Country = '", country, "'")
# Process Total Data
totalWeeklyData_FlightSearches <- query_exec(query1, projectID)
names(totalWeeklyData_FlightSearches) <- c("Date", "Total.FlightSearches")
# Process Web Data
webWeeklyData_FlightSearches <- query_exec(query2, projectID)
names(webWeeklyData_FlightSearches) <- c("Date", "Web.FlightSearches")
# Process Mobile Data
mobileWeeklyData_FlightSearches <- query_exec(query3, projectID)
names(mobileWeeklyData_FlightSearches) <- c("Date", "Mobile.FlightSearches")
# Bind all data together
dataset <- left_join(totalWeeklyData_FlightSearches, webWeeklyData_FlightSearches)
dataset <- left_join(dataset, mobileWeeklyData_FlightSearches)
dataset$Date <- convertDateVectorToWeekString(dataset$Date)
dataset <- arrange(dataset, Date)
return(dataset)
}
# Function to extract Bookings split by Digital Property (Total, Web, Mobile) for the last 10 weeks
trend_weeklyCountry_Bookings_splitByDigital <- function(country, currentYearStart, currentYearEnd){
query1 <- paste0("SELECT Date, Bookings FROM TABLE_DATE_RANGE(Total_Weekly_Performance.Weekly_Country_Metrics, TIMESTAMP('", currentYearStart, "'), TIMESTAMP('", currentYearEnd, "')) where Country = '", country, "'")
query2 <- paste0("SELECT Date, Bookings FROM TABLE_DATE_RANGE(Web_Weekly_Performance.Weekly_Country_Metrics, TIMESTAMP('", currentYearStart, "'), TIMESTAMP('", currentYearEnd, "')) where Country = '", country, "'")
query3 <- paste0("SELECT Date, Bookings FROM TABLE_DATE_RANGE(Mobile_Weekly_Performance.Weekly_MobileTotal_CountryMetrics, TIMESTAMP('", currentYearStart, "'), TIMESTAMP('", currentYearEnd, "')) where Country = '", country, "'")
# Process Total Data
totalWeeklyData_Bookings <- query_exec(query1, projectID)
names(totalWeeklyData_Bookings) <- c("Date", "Total.Bookings")
# Process Web Data
webWeeklyData_Bookings <- query_exec(query2, projectID)
names(webWeeklyData_Bookings) <- c("Date", "Web.Bookings")
# Process Mobile Data
mobileWeeklyData_Bookings <- query_exec(query3, projectID)
names(mobileWeeklyData_Bookings) <- c("Date", "Mobile.Bookings")
# Bind all data together
dataset <- left_join(totalWeeklyData_Bookings, webWeeklyData_Bookings)
dataset <- left_join(dataset, mobileWeeklyData_Bookings)
dataset$Date <- convertDateVectorToWeekString(dataset$Date)
dataset <- arrange(dataset, Date)
return(dataset)
}
# Function to extract ConversionRate split by Digital Property (Total, Web, Mobile) for the last 10 weeks
trend_weeklyCountry_ConversionRate_splitByDigital <- function(country, currentYearStart, currentYearEnd){
query1 <- paste0("SELECT Date, ConversionRate FROM TABLE_DATE_RANGE(Total_Weekly_Performance.Weekly_Country_Metrics, TIMESTAMP('", currentYearStart, "'), TIMESTAMP('", currentYearEnd, "')) where Country = '", country, "'")
query2 <- paste0("SELECT Date, ConversionRate FROM TABLE_DATE_RANGE(Web_Weekly_Performance.Weekly_Country_Metrics, TIMESTAMP('", currentYearStart, "'), TIMESTAMP('", currentYearEnd, "')) where Country = '", country, "'")
query3 <- paste0("SELECT Date, ConversionRate FROM TABLE_DATE_RANGE(Mobile_Weekly_Performance.Weekly_MobileTotal_CountryMetrics, TIMESTAMP('", currentYearStart, "'), TIMESTAMP('", currentYearEnd, "')) where Country = '", country, "'")
# Process Total Data
totalWeeklyData_ConversionRate <- query_exec(query1, projectID)
names(totalWeeklyData_ConversionRate) <- c("Date", "Total.ConversionRate")
# Process Web Data
webWeeklyData_ConversionRate <- query_exec(query2, projectID)
names(webWeeklyData_ConversionRate) <- c("Date", "Web.ConversionRate")
# Process Mobile Data
mobileWeeklyData_ConversionRate <- query_exec(query3, projectID)
names(mobileWeeklyData_ConversionRate) <- c("Date", "Mobile.ConversionRate")
# Bind all data together
dataset <- left_join(totalWeeklyData_ConversionRate, webWeeklyData_ConversionRate)
dataset <- left_join(dataset, mobileWeeklyData_ConversionRate)
dataset$Date <- convertDateVectorToWeekString(dataset$Date)
dataset <- arrange(dataset, Date)
return(dataset)
}
# Function to extract Monthly Visits by Total YOY (Rolling Year)
trend_monthlyCountry_Visits_YOY <- function(country, lastYearMonthlyStart, lastYearMonthlyEnd, currentYearMonthlyStart, currentYearMonthlyEnd){
query1 <- paste0("SELECT Date, Visits FROM TABLE_DATE_RANGE(Total_Weekly_Performance.Monthly_Country_Metrics, TIMESTAMP('", currentYearMonthlyStart, "'), TIMESTAMP('", currentYearMonthlyEnd, "')) where Country = '", country, "'")
query2 <- paste0("SELECT Date, Visits FROM TABLE_DATE_RANGE(Total_Weekly_Performance.Monthly_Country_Metrics, TIMESTAMP('", lastYearMonthlyStart, "'), TIMESTAMP('", lastYearMonthlyEnd, "')) where Country = '", country, "'")
# Process currentYearData
currentYearData <- query_exec(query1, projectID)
names(currentYearData) <- c("Date", "CurrentYear.Visits")
currentYearData <- arrange(currentYearData, Date)
# lastYearData  <- query_exec(Query2, projectID)
# names(currentYearData) <- c("Date", "LastYear.Visits")
# lastYearData <- arrange(lastYearData, Date)
currentYearData$Date <- convertDateVectorToMonthString(currentYearData$Date)
# lastYearData$Date <- convertDateVectorToMonthString(lastYearData$Date)
return(currentYearData)
}
# Function to extract Monthly Flight Searches by Total YOY (Rolling Year)
trend_monthlyCountry_FlightSearches_YOY <- function(country, lastYearMonthlyStart, lastYearMonthlyEnd, currentYearMonthlyStart, currentYearMonthlyEnd){
query1 <- paste0("SELECT Date, FlightSearches FROM TABLE_DATE_RANGE(Total_Weekly_Performance.Monthly_Country_Metrics, TIMESTAMP('", currentYearMonthlyStart, "'), TIMESTAMP('", currentYearMonthlyEnd, "')) where Country = '", country, "'")
query2 <- paste0("SELECT Date, FlightSearches FROM TABLE_DATE_RANGE(Total_Weekly_Performance.Monthly_Country_Metrics, TIMESTAMP('", lastYearMonthlyStart, "'), TIMESTAMP('", lastYearMonthlyEnd, "')) where Country = '", country, "'")
# Process currentYearData
currentYearData <- query_exec(query1, projectID)
names(currentYearData) <- c("Date", "CurrentYear.FlightSearches")
currentYearData <- arrange(currentYearData, Date)
# lastYearData  <- query_exec(Query2, projectID)
# names(currentYearData) <- c("Date", "LastYear.FlightSearches")
# lastYearData <- arrange(lastYearData, Date)
currentYearData$Date <- convertDateVectorToMonthString(currentYearData$Date)
# lastYearData$Date <- convertDateVectorToMonthString(lastYearData$Date)
return(currentYearData)
}
# Function to extract Monthly Bookings by Total YOY (Rolling Year)
trend_monthlyCountry_Bookings_YOY <- function(country, lastYearMonthlyStart, lastYearMonthlyEnd, currentYearMonthlyStart, currentYearMonthlyEnd){
query1 <- paste0("SELECT Date, Bookings FROM TABLE_DATE_RANGE(Total_Weekly_Performance.Monthly_Country_Metrics, TIMESTAMP('", currentYearMonthlyStart, "'), TIMESTAMP('", currentYearMonthlyEnd, "')) where Country = '", country, "'")
query2 <- paste0("SELECT Date, Bookings FROM TABLE_DATE_RANGE(Total_Weekly_Performance.Monthly_Country_Metrics, TIMESTAMP('", lastYearMonthlyStart, "'), TIMESTAMP('", lastYearMonthlyEnd, "')) where Country = '", country, "'")
# Process currentYearData
currentYearData <- query_exec(query1, projectID)
names(currentYearData) <- c("Date", "CurrentYear.Bookings")
currentYearData <- arrange(currentYearData, Date)
# lastYearData  <- query_exec(Query2, projectID)
# names(currentYearData) <- c("Date", "LastYear.Bookings")
# lastYearData <- arrange(lastYearData, Date)
currentYearData$Date <- convertDateVectorToMonthString(currentYearData$Date)
# lastYearData$Date <- convertDateVectorToMonthString(lastYearData$Date)
return(currentYearData)
}
# Function to extract Monthly Conversion Rate by Total YOY (Rolling Year)
trend_monthlyCountry_ConversionRate_YOY <- function(country, lastYearMonthlyStart, lastYearMonthlyEnd, currentYearMonthlyStart, currentYearMonthlyEnd){
query1 <- paste0("SELECT Date, ConversionRate FROM TABLE_DATE_RANGE(Total_Weekly_Performance.Monthly_Country_Metrics, TIMESTAMP('", currentYearMonthlyStart, "'), TIMESTAMP('", currentYearMonthlyEnd, "')) where Country = '", country, "'")
query2 <- paste0("SELECT Date, ConversionRate FROM TABLE_DATE_RANGE(Total_Weekly_Performance.Monthly_Country_Metrics, TIMESTAMP('", lastYearMonthlyStart, "'), TIMESTAMP('", lastYearMonthlyEnd, "')) where Country = '", country, "'")
# Process currentYearData
currentYearData <- query_exec(query1, projectID)
names(currentYearData) <- c("Date", "CurrentYear.ConversionRate")
currentYearData <- arrange(currentYearData, Date)
# lastYearData  <- query_exec(Query2, projectID)
# names(lastYearData) <- c("Date", "LastYear.ConversionRate")
# lastYearData <- arrange(lastYearData, Date)
currentYearData$Date <- convertDateVectorToMonthString(currentYearData$Date)
# lastYearData$Date <- convertDateVectorToMonthString(lastYearData$Date)
return(currentYearData)
}
# Function to get the YOY Comparison (Not in trend)
comparison_byCountry <- function(dataset, country, lastYearDate, currentYearDate){
currentYearStart <- as.Date(currentYearDate) - 7
currentYearEnd <- currentYearDate
query1 <- paste0("SELECT Date, Visits, Visitors, Bookings, ConversionRate, SeatsSold, TotalRevenue_USD, FlightSearches, AverageFare_USD FROM TABLE_DATE_RANGE(", dataset, ", TIMESTAMP('", currentYearStart, "'), TIMESTAMP('", currentYearEnd, "')) where Country = '", country, "'")
#### Uncomment this section after march
# query2 <- paste0("SELECT Date, Visits, Visitors, Bookings, ConversionRate, SeatsSold, TotalRevenue_USD, FlightSearches, AverageFare_USD FROM TABLE_DATE_RANGE(", dataset, ", TIMESTAMP('", lastYearDate, "'), TIMESTAMP('", lastYearDate, "')) where Country = '", country, "'")
# Query out the data
web_weekly_metrics <- query_exec(query1, projectID)
#### Uncomment this section after march
# web_weekly_metrics_lastYear <- query_exec(query2, projectID)
# web_weekly_metrics <- rbind(web_weekly_metrics, web_weekly_metrics_lastYear)
#### Comment this section after march / delete would be better
temp <- data.frame(Date = lastYearDate, Visits = NA, Visitors = NA, Bookings = NA, ConversionRate = NA, SeatsSold = NA,
TotalRevenue_USD = NA, FlightSearches = NA, AverageFare_USD = NA)
web_weekly_metrics <- rbind(temp, web_weekly_metrics)
web_weekly_metrics <- arrange(web_weekly_metrics, Date)
# Clean up data
web_weekly_metrics <- gather(web_weekly_metrics, Metric, MetricValue, 2: ncol(web_weekly_metrics))
web_weekly_metrics <- spread(web_weekly_metrics, Date, MetricValue)
# Get the date column names out to create the date/time dataframe
dateVector <- names(web_weekly_metrics)[2:length(names(web_weekly_metrics))]
dateTimeFrame <- data.frame(DateTemp = dateVector)
isoYearVector <- vector()
for(j in 1:nrow(dateTimeFrame)){
isoYearVector <- c(isoYearVector, (year(utility.describeDate(dateTimeFrame[j, 1])$IsoYear)))
}
dateTimeFrame <- cbind(dateTimeFrame, Year = isoYearVector)
dateTimeFrame <- mutate(dateTimeFrame, Week = paste0("W", isoweek(DateTemp)), Date = paste(format(format(as.Date(utility.getMondayFromDate(DateTemp)), "%d %b")), "-", format(as.Date(utility.getMondayFromDate(DateTemp)) + 6, "%d %b")))
dateTimeFrame <- dateTimeFrame[, -1]
dateTimeFrame <- as.data.frame(t(as.matrix(dateTimeFrame)))
dateTimeFrame <- as.data.frame(cbind(Time = row.names(dateTimeFrame), dateTimeFrame))
row.names(dateTimeFrame) <- NULL
# Rename all columns appropiately to week numbers
j = 2
while(j <= length(web_weekly_metrics)){
names(web_weekly_metrics)[j] <- convertDateToWeekString(names(web_weekly_metrics)[j])
j <- j + 1
}
# Remove factor to allow rename
web_weekly_metrics[, 1] <- as.character(web_weekly_metrics[, 1])
# Rename the Metrics based on the report
names(web_weekly_metrics)[1] <- country
web_weekly_metrics[2, 1] <- "Unique Visitors"
web_weekly_metrics[4, 1] <- "Conversion Rate (O/V)"
web_weekly_metrics[5, 1] <- "Seats Sold"
web_weekly_metrics[6, 1] <- "Revenue (USD)"
web_weekly_metrics[7, 1] <- "Flight Searches"
web_weekly_metrics[8, 1] <- "Average Fare (USD)"
output <- list("dateTimeFrame" = dateTimeFrame, "country" = web_weekly_metrics)
}
# Function to get the YOY Comparison (Not in trend)
# TODO: In march need to reset it
comparison_byKPI <- function(dataset, countryVector, KPI, lastYearDate, currentYearDate){
currentYearStart <- as.Date(currentYearDate) - 7
currentYearEnd <- currentYearDate
countryFilter <- getCountryFilter(countryVector)
query1 <- paste0("SELECT Date, Country, ", KPI, " FROM TABLE_DATE_RANGE(", dataset, ", TIMESTAMP('", currentYearStart, "'), TIMESTAMP('", currentYearEnd, "')) WHERE ", countryFilter)
# query2 <- paste0("SELECT Date, Country, ", KPI, " FROM TABLE_DATE_RANGE(", dataset, ", TIMESTAMP('", lastYearDate, "'), TIMESTAMP('", lastYearDate, "')) WHERE ",countryFilter)
# Query out the data
web_weekly_metrics <- query_exec(query1, projectID)
# web_weekly_metrics_lastYear <- query_exec(query2, projectID)
# web_weekly_metrics <- rbind(web_weekly_metrics, web_weekly_metrics_lastYear)
web_weekly_metrics <- arrange(web_weekly_metrics, Date)
# Clean up data
#web_weekly_metrics <- gather(web_weekly_metrics, Metric, MetricValue, 3: ncol(web_weekly_metrics))
web_weekly_metrics <- spread_(web_weekly_metrics, "Date", KPI)
# Comment or delete this once past the march
web_weekly_metrics <- cbind(Country = web_weekly_metrics[, 1], lastYearDate = NA, web_weekly_metrics[, -1])
names(web_weekly_metrics)[2] <- lastYearDate
# Get the date column names out to create the date/time dataframe
dateVector <- names(web_weekly_metrics)[2:length(names(web_weekly_metrics))]
dateTimeFrame <- data.frame(DateTemp = dateVector)
isoYearVector <- vector()
for(j in 1:nrow(dateTimeFrame)){
isoYearVector <- c(isoYearVector, (year(utility.describeDate(dateTimeFrame[j, 1])$IsoYear)))
}
dateTimeFrame <- cbind(dateTimeFrame, Year = isoYearVector)
dateTimeFrame <- mutate(dateTimeFrame, Week = paste0("W", isoweek(DateTemp)), Date = paste(format(format(as.Date(utility.getMondayFromDate(DateTemp)), "%d %b")), "-", format(as.Date(utility.getMondayFromDate(DateTemp)) + 6, "%d %b")))
dateTimeFrame <- dateTimeFrame[, -1]
dateTimeFrame <- as.data.frame(t(as.matrix(dateTimeFrame)))
dateTimeFrame <- as.data.frame(cbind(Time = row.names(dateTimeFrame), dateTimeFrame))
row.names(dateTimeFrame) <- NULL
# Rename all columns appropiately to week numbers
j = 2
while(j <= length(web_weekly_metrics)){
names(web_weekly_metrics)[j] <- convertDateToWeekString(names(web_weekly_metrics)[j])
j <- j + 1
}
# Move global to the top
arrangeVector <- c(seq(1, nrow(web_weekly_metrics)))
web_weekly_metrics <- mutate(web_weekly_metrics, arrange = arrangeVector)
web_weekly_metrics$arrange[web_weekly_metrics$Country == "Global"] <- -1
web_weekly_metrics <- arrange(web_weekly_metrics, arrange)
web_weekly_metrics <- select(web_weekly_metrics, -arrange)
# Rename the top left hand column accordingly
KPIValue <- switch(KPI,
Visits = "Visits",
FlightSearches = "Flight Searches",
Bookings = "Bookings",
SeatsSold = "Seats Sold",
ConversionRate = "Conversion Rate",
TotalRevenue_USD = "Total Revenue (USD)",
AverageFare_USD = "Average Fare (USD)")
names(web_weekly_metrics)[1] <- KPIValue
output <- list("dateTimeFrame" = dateTimeFrame, "KPI" = web_weekly_metrics)
}
# Convenience Function to extract the data that is to be found on the country sheets
countrySheet <- function(country, countryCode, weeklyStart, weeklyEnd, lastYearMonthlyStart, lastYearMonthlyEnd, currentYearMonthlyStart, currentYearMonthlyEnd){
# Get First row of weekly trends
print(paste("Extracting for first row of data", country))
weeklyVisitsConversionRateData <- trend_weeklyCountry_Visits_ConversionRate(country, weeklyStart, weeklyEnd)
weeklyVisitsDigitalSplitData <- trend_weeklyCountry_Visits_splitByDigital(country, weeklyStart, weeklyEnd)
weeklyFlightSearchesDigitalSplitData <- trend_weeklyCountry_FlightSearches_splitByDigital(country, weeklyStart, weeklyEnd)
weeklyCountryBookingsDigitalSplitData <- trend_weeklyCountry_Bookings_splitByDigital(country, weeklyStart, weeklyEnd)
weeklyCountryConversionRateDigitalSplitData <- trend_weeklyCountry_ConversionRate_splitByDigital(country, weeklyStart, weeklyEnd)
# Get Second row of weekly trends
print(paste("Extracting for second row of data", country))
monthlyCountryVisits <- trend_monthlyCountry_Visits_YOY(country, lastYearMonthlyStart, lastYearMonthlyEnd, currentYearMonthlyStart, currentYearMonthlyEnd)
monthlyCountryFlightSearches <- trend_monthlyCountry_FlightSearches_YOY(country, lastYearMonthlyStart, lastYearMonthlyEnd, currentYearMonthlyStart, currentYearMonthlyEnd)
monthlyCountryBookings <- trend_monthlyCountry_Bookings_YOY(country, lastYearMonthlyStart, lastYearMonthlyEnd, currentYearMonthlyStart, currentYearMonthlyEnd)
monthlyCountryConversionRate <- trend_monthlyCountry_ConversionRate_YOY(country, lastYearMonthlyStart, lastYearMonthlyEnd, currentYearMonthlyStart, currentYearMonthlyEnd)
# Send the data to the country sheet
nameOfSheet <- paste0(countryCode, " data")
# First row of weekly trends graphs
print(paste("Putting first row of data into spreadsheet", country))
setDataInSheets(sheetID, nameOfSheet, "A4", weeklyVisitsConversionRateData)
setDataInSheets(sheetID, nameOfSheet, "E4", weeklyVisitsDigitalSplitData)
setDataInSheets(sheetID, nameOfSheet, "J4", weeklyFlightSearchesDigitalSplitData)
setDataInSheets(sheetID, nameOfSheet, "O4", weeklyCountryBookingsDigitalSplitData)
setDataInSheets(sheetID, nameOfSheet, "T4", weeklyCountryConversionRateDigitalSplitData)
# Second row of monthly trends graphs
print(paste("Putting second row of data into spreadsheet", country))
setDataInSheets(sheetID, nameOfSheet, "Y4", monthlyCountryVisits)
setDataInSheets(sheetID, nameOfSheet, "AC4", monthlyCountryFlightSearches)
setDataInSheets(sheetID, nameOfSheet, "AG4", monthlyCountryBookings)
setDataInSheets(sheetID, nameOfSheet, "AK4", monthlyCountryConversionRate)
}
# Send data to countrytabs
i <- 1
while(i <= nrow(countryDataFrame)){
countrySheet(countryDataFrame[i, 1], countryDataFrame[i, 2], mondayDate_10WeeksBack, mondayDate_1WeeksBack,
monthDate_24MonthsBack, monthDate_13MonthsBack, monthDate_12MonthsBack, monthDate_1MonthsBack)
i <- i + 1
print(i)
}
mode <- 'manual'
reportDate <- '2015-12-01'
mode <- 'auto'
if(mode == "auto"){
reportDate <- as.Date(utility.describeDate(today())$Month) - months(1)
}
source('~/Documents/Projects/devastator/AirAsia/AirAsia_Total Weekly Performance_Monthly Data Upload.R')
setwd("..")
setwd("..")
list.files()
setwd("./tengence_dashboards")
list.files()
setwd("Signup dashboard/")
library(shinydashboard)
install.packages("shinydashboard")
shiny::runApp()
shiny::runApp()
shiny::runApp()
?tableOutput
shiny::runApp()
cons <- dbListConnections(MySQL())
#     for(con in cons){
#       dbDisconnect(con)
#     }
cons <- dbListConnections(MySQL())
for(con in cons){
dbDisconnect(con)
}
dbListConnections(MySQL())
cons
remove(cons)
remove(con)
dbListConnections(MySQL())
?infoBox
?icon
shiny::runApp()
shiny::runApp()
shiny::runApp()
?source
tengenceAlertsCon <- dbConnect(RMySQL::MySQL(), dbname = "tengenceAlerts", username = "admin", password = "hairizuanTengenceAlerts", host = "tengence-alerts.cwyteavfdqer.us-west-2.rds.amazonaws.com")
data <- dbGetQuery(tengenceAlertsCon, "select email, created_at, access_level, hashed_email from tengenceAlerts.users")
dbDisconnect(tengenceAlertsCon)
names(data)
unique(data$access_level)
View(data)
View(data)
View(data)
c(1:2)
shiny::runApp()
shiny::runApp()
str(data)
today()
today()+1
seq(as.Date("2015-11-01"), 1,2)
?seq
seq(as.Date("2015-11-01"), today(), 1)
getTable_dates <- function(originDate, endDate){
originDate <- as.Date(originDate)
endDate <- as.Date(endDate)
dateVector <- seq(originDate, endDate, 1)
dateDf <- as.data.frame(dateVector)
return(dateDf)
}
getTable_dates("2015-11-01", today())
View(getTable_dates("2015-11-01", today()))
getTable_dates <- function(originDate, endDate){
originDate <- as.Date(originDate)
endDate <- as.Date(endDate)
dateVector <- seq(originDate, endDate, 1)
dateDf <- as.data.frame(Date = dateVector)
return(dateDf)
}
View(getTable_dates("2015-11-01", today()))
getTable_dates <- function(originDate, endDate){
originDate <- as.Date(originDate)
endDate <- as.Date(endDate)
dateVector <- seq(originDate, endDate, 1)
dateDf <- as.data.frame(dateVector)
names(dateDf)[1] <- "Date"
return(dateDf)
}
View(getTable_dates("2015-11-01", today()))
names(data)
data$created_at <- as.Date(data$created_at)
str(data)
View(data)
userData <- function(){
tengenceAlertsCon <- dbConnect(RMySQL::MySQL(), dbname = "tengenceAlerts", username = "admin", password = "hairizuanTengenceAlerts", host = "tengence-alerts.cwyteavfdqer.us-west-2.rds.amazonaws.com")
data <- dbGetQuery(tengenceAlertsCon, "select email, created_at, access_level from tengenceAlerts.users")
# Remove admin users
data <- data[-c(1:2), ]
# Change the datatype for created_at to date
data$created_at <- as.Date(data$created_at)
dbDisconnect(tengenceAlertsCon)
return(data)
}
df <- userData()
remove(data)
View(df)
df
companyData <- filter(df, access_level == "read_only")
companyCount_byTime <- summarize(group_by(companyData, created_at), n())
View(companyCount_byTime)
?left_join
companyData <- filter(df, access_level == "read_only")
organizationData <- filter(df, access_level == "write_only")
# Group by operation
companyCount_byTime <- summarize(group_by(companyData, created_at), Companies = n())
names(companyCount_byTime)[1] <- "Date"
organizationCount_byTime <- summarize(group_by(organizationData, created_at), Companies = n())
names(organizationCount_byTime)[1] <- "Date"
# Combining the dataset
fullData <- left_join(dateDf, companyCount_byTime)
fullData <- left_join(fullData, organizationCount_byTime)
dateDf <- getTable_dates("2015-11-01", today())
fullData <- left_join(dateDf, companyCount_byTime)
fullData <- left_join(fullData, organizationCount_byTime)
companyData <- filter(df, access_level == "read_only")
organizationData <- filter(df, access_level == "write_only")
# Group by operation
companyCount_byTime <- summarize(group_by(companyData, created_at), Companies = n())
names(companyCount_byTime)[1] <- "Date"
organizationCount_byTime <- summarize(group_by(organizationData, created_at), Organizations = n())
names(organizationCount_byTime)[1] <- "Date"
# Combining the dataset
fullData <- left_join(dateDf, companyCount_byTime)
fullData <- left_join(fullData, organizationCount_byTime)
View(fullData)
is.na(fullData[, 2])
is.na(fullData[, 2]) <- 0
View(fullData)
fullData[is.na(fullData[, 2]), 2] <- 0
View(fullData)
sum(fullData[, 2])
fullData[is.na(fullData[, 3]), 3] <- 0
?cumsum
cumsum(fullData$Companies)
?gvis
library(googleVis)
?gvisLineChart
getTable_Organizations_CompaniesVSTime_Cumulative <- function(dateDf, df){
fullData <- getTable_Organizations_CompaniesVSTime(dateDf, df)
fullData[, 2] <- cumsum(fullData[, 2])
fullData[, 3] <- cumsum(fullData[, 3])
fullData
}
getTable_Organizations_CompaniesVSTime_Cumulative(dateDf, df)
getTable_Organizations_CompaniesVSTime <- function(dateDf, df){
# Filter the data
companyData <- filter(df, access_level == "read_only")
organizationData <- filter(df, access_level == "write_only")
# Group by operation
companyCount_byTime <- summarize(group_by(companyData, created_at), Companies = n())
names(companyCount_byTime)[1] <- "Date"
organizationCount_byTime <- summarize(group_by(organizationData, created_at), Organizations = n())
names(organizationCount_byTime)[1] <- "Date"
# Combining the dataset
fullData <- left_join(dateDf, companyCount_byTime)
fullData <- left_join(fullData, organizationCount_byTime)
# Changing all the NAs to 0
fullData[is.na(fullData[, 2]), 2] <- 0
fullData[is.na(fullData[, 3]), 3] <- 0
fullData
}
getTable_Organizations_CompaniesVSTime_Cumulative(dateDf, df)
data <- getTable_Organizations_CompaniesVSTime(dateDf, df)
names(data)
data <- getTable_Organizations_CompaniesVSTime(dateDf, df)
chart <- gvisLineChart(data, "Date", c("Companies", "Organizations"), options(width = 500, height = 500))
plot(chart)
chart <- gvisLineChart(data, "Date", c("Companies", "Organizations"), options(list(width = 500, height = 500)))
chart <- gvisLineChart(data, "Date", c("Companies", "Organizations"), options(list(width = 500, height = 500)))
plot(chart)
chart <- gvisLineChart(data, "Date", c("Companies", "Organizations"))
plot(chart)
data <- getTable_Organizations_CompaniesVSTime_Cumulative(dateDf, df)
chart <- gvisLineChart(data, "Date", c("Companies", "Organizations"))
plot(chart)
data <- getTable_Organizations_CompaniesVSTime(dateDf, df)
chart <- gvisLineChart(data, "Date", c("Companies", "Organizations"),
options = list(title = "Test"))
plot(chart)
shiny::runApp()
shiny::runApp()
?runApp
shiny::runApp(options(shiny.port = 3838))
shiny::runApp(port = options(shiny.port = 3838))
shiny::runApp()
shiny::runApp()
shiny::runApp(port = options(shiny.port = 3838))
shiny::runApp(port = options(shiny.port = 3838), host = "0.0.0.0", launch.browser = FALSE)
shiny::runApp(port = options(shiny.port = 3838), host = "0.0.0.0")
shiny::runApp(port = 3838, host = "0.0.0.0")
shiny::runApp(port = 3838, host = "0.0.0.0", launch.browser = FALSE)
setwd("..")
setwd("..")
setwd("./R_Programming/")
setwd("./SampleCode/")
list.files()
setwd("..")
setwd("./References/")
list.files()
library(caret)
library(kernlab)
install.packages(caret)
install.packages("caret")
install.packages("kernlab")
library(caret)
library(kernlab)
data(spam)
install.packages("pbkrtest")
library(caret)
install.packages("caret", repos=c("http://rstudio.org/_packages", "http://cran.rstudio.com"))
install.packages("caret")
library(caret)
install.packages("pbkrtest")
install.packages("pbkrtes")
install.packages("pbkrtest")
